'use strict';

var _ = require('lodash');
var isCoordinates = require('is-coordinates');

module.exports = function (options) {
  var errorHandler = require('../errorHandler')(options);

  function jsonQueryParser(key, value) {
    if (key === '$regex' && !options.allowRegex) {
      return undefined;
    }

    if (_.isString(value)) {
      if (value[0] === '~') {
        // parse RegExp
        return options.allowRegex ? new RegExp(value.substr(1), 'i') : undefined;
      } else if (value[0] === '>') {
        if (value[1] === '=') {
          return { $gte: value.substr(2) };
        } else {
          return { $gt: value.substr(1) };
        }
      } else if (value[0] === '<') {
        if (value[1] === '=') {
          return { $lte: value.substr(2) };
        } else {
          return { $lt: value.substr(1) };
        }
      } else if (value[0] === '!' && value[1] === '=') {
        return { $ne: value.substr(2) };
        /* This feature was disabled because it requires MongoDB 3
        } else if (value[0] === '=') {
          return { $eq: value.substr(1) } */
      }
    } else if (_.isArray(value) && key[0] !== '$' && key !== 'coordinates' && !isCoordinates(value)) {
      return { $in: value };
    }

    return value;
  }

  function parseQueryOptions(queryOptions) {
    if (queryOptions.select && _.isString(queryOptions.select)) {
      var select = queryOptions.select.split(',');
      queryOptions.select = {};

      for (var i = 0, length = select.length; i < length; i++) {
        if (select[i][0] === '-') {
          queryOptions.select[select[i].substring(1)] = 0;
        } else {
          queryOptions.select[select[i]] = 1;
        }
      }
    }

    if (queryOptions.populate) {
      if (_.isString(queryOptions.populate)) {
        var populate = queryOptions.populate.split(',');
        queryOptions.populate = [];

        for (var _i = 0, _length = populate.length; _i < _length; _i++) {
          queryOptions.populate.push({
            path: populate[_i]
          });

          for (var key in queryOptions.select) {
            if (key.indexOf(populate[_i] + '.') === 0) {
              if (queryOptions.populate[_i].select) {
                queryOptions.populate[_i].select += ' ';
              } else {
                queryOptions.populate[_i].select = '';
              }

              if (queryOptions.select[key] === 0) {
                queryOptions.populate[_i].select += '-';
              }

              queryOptions.populate[_i].select += key.substring(populate[_i].length + 1);
              delete queryOptions.select[key];
            }
          }

          // If other specific fields are selected, add the populated field
          if (queryOptions.select) {
            if (Object.keys(queryOptions.select).length > 0 && !queryOptions.select[populate[_i]]) {
              queryOptions.select[populate[_i]] = 1;
            } else if (Object.keys(queryOptions.select).length === 0) {
              delete queryOptions.select;
            }
          }
        }
      } else if (!_.isArray(queryOptions.populate)) {
        queryOptions.populate = [queryOptions.populate];
      }
    }

    return queryOptions;
  }

  return function (req, res, next) {
    var whitelist = ['distinct', 'limit', 'populate', 'query', 'select', 'skip', 'sort'];

    req._ermQueryOptions = {};

    for (var key in req.query) {
      if (whitelist.indexOf(key) === -1) {
        continue;
      }

      if (key === 'query') {
        try {
          req._ermQueryOptions[key] = JSON.parse(req.query[key], jsonQueryParser);
        } catch (e) {
          return errorHandler(req, res, next)(new Error('invalid_json_' + key));
        }
      } else if (key === 'populate' || key === 'select' || key === 'sort') {
        try {
          req._ermQueryOptions[key] = JSON.parse(req.query[key]);
        } catch (e) {
          req._ermQueryOptions[key] = req.query[key];
        }
      } else if (key === 'limit' || key === 'skip') {
        req._ermQueryOptions[key] = parseInt(req.query[key], 10);
      } else {
        req._ermQueryOptions[key] = req.query[key];
      }
    }

    req._ermQueryOptions = parseQueryOptions(req._ermQueryOptions);

    next();
  };
};
//# sourceMappingURL=data:application/json;base64,
//# sourceMappingURL=prepareQuery.js.map
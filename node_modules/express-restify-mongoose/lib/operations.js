'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _ = require('lodash');
var http = require('http');
var moredots = require('moredots');

module.exports = function (model, options, excludedMap) {
  var buildQuery = require('./buildQuery')(options);
  var errorHandler = require('./errorHandler')(options);

  function findById(filteredContext, id) {
    return filteredContext.findOne().and(_defineProperty({}, options.idProperty, id));
  }

  function isDistinctExcluded(req) {
    return options.filter.isExcluded(req._ermQueryOptions['distinct'], {
      access: req.access,
      excludedMap: excludedMap
    });
  }

  function getItems(req, res, next) {
    if (isDistinctExcluded(req)) {
      req.erm.result = [];
      req.erm.statusCode = 200;
      return next();
    }

    options.contextFilter(model, req, function (filteredContext) {
      buildQuery(filteredContext.find(), req._ermQueryOptions).then(function (items) {
        req.erm.result = items;
        req.erm.statusCode = 200;

        if (options.totalCountHeader && !req._ermQueryOptions['distinct']) {
          options.contextFilter(model, req, function (countFilteredContext) {
            buildQuery(countFilteredContext.count(), _.assign(req._ermQueryOptions, {
              skip: 0,
              limit: 0
            })).then(function (count) {
              req.erm.totalCount = count;
              next();
            }, errorHandler(req, res, next));
          });
        } else {
          next();
        }
      }, errorHandler(req, res, next));
    });
  }

  function getCount(req, res, next) {
    options.contextFilter(model, req, function (filteredContext) {
      buildQuery(filteredContext.count(), req._ermQueryOptions).then(function (count) {
        req.erm.result = { count: count };
        req.erm.statusCode = 200;

        next();
      }, errorHandler(req, res, next));
    });
  }

  function getShallow(req, res, next) {
    options.contextFilter(model, req, function (filteredContext) {
      buildQuery(findById(filteredContext, req.params.id), req._ermQueryOptions).then(function (item) {
        if (!item) {
          return errorHandler(req, res, next)(new Error(http.STATUS_CODES[404]));
        }

        for (var prop in item) {
          item[prop] = _typeof(item[prop]) === 'object' && prop !== '_id' ? true : item[prop];
        }

        req.erm.result = item;
        req.erm.statusCode = 200;

        next();
      }, errorHandler(req, res, next));
    });
  }

  function deleteItems(req, res, next) {
    options.contextFilter(model, req, function (filteredContext) {
      buildQuery(filteredContext.remove(), req._ermQueryOptions).then(function () {
        req.erm.statusCode = 204;

        next();
      }, errorHandler(req, res, next));
    });
  }

  function getItem(req, res, next) {
    if (isDistinctExcluded(req)) {
      req.erm.result = [];
      req.erm.statusCode = 200;
      return next();
    }

    options.contextFilter(model, req, function (filteredContext) {
      buildQuery(findById(filteredContext, req.params.id), req._ermQueryOptions).then(function (item) {
        if (!item) {
          return errorHandler(req, res, next)(new Error(http.STATUS_CODES[404]));
        }

        req.erm.result = item;
        req.erm.statusCode = 200;

        next();
      }, errorHandler(req, res, next));
    });
  }

  function deleteItem(req, res, next) {
    if (options.findOneAndRemove) {
      options.contextFilter(model, req, function (filteredContext) {
        findById(filteredContext, req.params.id).findOneAndRemove().then(function (item) {
          if (!item) {
            return errorHandler(req, res, next)(new Error(http.STATUS_CODES[404]));
          }

          req.erm.statusCode = 204;

          next();
        }, errorHandler(req, res, next));
      });
    } else {
      req.erm.document.remove().then(function () {
        req.erm.statusCode = 204;

        next();
      }, errorHandler(req, res, next));
    }
  }

  function createObject(req, res, next) {
    req.body = options.filter.filterObject(req.body || {}, {
      access: req.access,
      populate: req._ermQueryOptions.populate
    });

    if (model.schema.options._id) {
      delete req.body._id;
    }

    if (model.schema.options.versionKey) {
      delete req.body[model.schema.options.versionKey];
    }

    model.create(req.body).then(function (item) {
      return model.populate(item, req._ermQueryOptions.populate || []);
    }).then(function (item) {
      req.erm.result = item;
      req.erm.statusCode = 201;

      next();
    }, errorHandler(req, res, next));
  }

  function modifyObject(req, res, next) {
    req.body = options.filter.filterObject(req.body || {}, {
      access: req.access,
      populate: req._ermQueryOptions.populate
    });

    delete req.body._id;

    if (model.schema.options.versionKey) {
      delete req.body[model.schema.options.versionKey];
    }

    function depopulate(src) {
      var dst = {};

      for (var key in src) {
        var path = model.schema.path(key);

        if (path && path.caster && path.caster.instance === 'ObjectID') {
          if (_.isArray(src[key])) {
            for (var j = 0; j < src[key].length; ++j) {
              if (_typeof(src[key][j]) === 'object') {
                dst[key] = dst[key] || {};
                dst[key][j] = src[key][j]._id;
              }
            }
          } else if (_.isPlainObject(src[key])) {
            dst[key] = src[key]._id;
          }
        } else if (_.isPlainObject(src[key])) {
          if (path && path.instance === 'ObjectID') {
            dst[key] = src[key]._id;
          } else {
            dst[key] = depopulate(src[key]);
          }
        }

        if (_.isUndefined(dst[key])) {
          dst[key] = src[key];
        }
      }

      return dst;
    }

    var cleanBody = moredots(depopulate(req.body));

    if (options.findOneAndUpdate) {
      options.contextFilter(model, req, function (filteredContext) {
        findById(filteredContext, req.params.id).findOneAndUpdate({}, {
          $set: cleanBody
        }, {
          new: true,
          runValidators: options.runValidators
        }).exec().then(function (item) {
          return model.populate(item, req._ermQueryOptions.populate || []);
        }).then(function (item) {
          if (!item) {
            return errorHandler(req, res, next)(new Error(http.STATUS_CODES[404]));
          }

          req.erm.result = item;
          req.erm.statusCode = 200;

          next();
        }, errorHandler(req, res, next));
      });
    } else {
      for (var key in cleanBody) {
        req.erm.document.set(key, cleanBody[key]);
      }

      req.erm.document.save().then(function (item) {
        return model.populate(item, req._ermQueryOptions.populate || []);
      }).then(function (item) {
        req.erm.result = item;
        req.erm.statusCode = 200;

        next();
      }, errorHandler(req, res, next));
    }
  }

  return { getItems: getItems, getCount: getCount, getItem: getItem, getShallow: getShallow, createObject: createObject, modifyObject: modifyObject, deleteItems: deleteItems, deleteItem: deleteItem };
};
//# sourceMappingURL=data:application/json;base64,
//# sourceMappingURL=operations.js.map